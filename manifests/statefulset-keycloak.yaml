apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  serviceName: keycloak
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      volumes:
        - name: keycloak-tls
          secret:
            secretName: alopezpa-homelab-tls
            defaultMode: 420
            optional: false
        # - name: realm-import
        #   configMap:
        #     name: keycloak-realm-alm-import
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:24.0.2
          #image: quay.io/keycloak/keycloak:23.0.7
          imagePullPolicy: IfNotPresent
          args:
            - start
            - -Dkeycloak.profile.feature.upload_scripts=enabled
          #   ## TODO: mejor hacer el import con un job que ejecute helm, y este compruebe si existe el realm alm y si no existe lo importe.
          #   # - --import-realm
          #   # - -Dkeycloak.profile.feature.upload_scripts=enabled
            
          ports:
            - containerPort: 8443
              protocol: TCP
            - containerPort: 8080
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
          env: # https://www.keycloak.org/server/all-config
            - name: KC_HEALTH_ENABLED
              value: 'true'
            - name: KC_METRICS_ENABLED
              value: 'false'
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL_HOST
              value: postgres.postgres.svc
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-auth
                  key: username
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-auth
                  key: password
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-auth
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-auth
                  key: password
            ## Si algun dia queremos replicas
            # - name: jgroups.dns.query
            #   value: keycloak-discovery.keycloak
            - name: KC_HOSTNAME_DEBUG #arancar modo debug
              value: 'false'
            - name: KC_HOSTNAME
              value: keycloak.alopezpa.homelab
            - name: KC_HTTPS_CERTIFICATE_FILE
              value: /mnt/certificates/tls.crt
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
              value: /mnt/certificates/tls.key
            - name: KC_ENABLE_TLS
              value: 'true'
            - name: KC_TLS_HOSTNAME_VERIFIER
              value: WILDCARD
            - name: KC_PROXY_HEADERS #https://www.keycloak.org/server/reverseproxy
              value: forwarded
           # - name: KC_PROXY #Deprecated but necessary to fix admin ui reload page bug
           #   value: 'edge'
            - name: QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY # Avoid data lost if the application is terminated abruptly
              value: 'true'
          resources:
              requests:
                cpu: 50m
                memory: 512Mi
              #limits:
                #memory: 2048Mi

          volumeMounts:
          #   - name: realm-import
          #     mountPath: /opt/keycloak/data/import
            - name: keycloak-tls
              mountPath: /mnt/certificates
          # livenessProbe:
          #   httpGet:
          #     path: /health/live
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 20
          #   timeoutSeconds: 1
          #   periodSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 150
          # readinessProbe:
          #   httpGet:
          #     path: /health/ready
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 20
          #   timeoutSeconds: 1
          #   periodSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 250
      restartPolicy: Always
      terminationGracePeriodSeconds: 20
      # Para que el servicio de keycloak este preferiblemente en el mismo nodo que postgres y así ganar algo de rendimiento
      # pero sobretodo en caso de caer un nodo reducir las probabilidades que el servicio de keycloak se vea afectado
      # Si algun dia consideramos que es critico la siguiente mejora ya és hacer un cluster de postgres con 3 instancias repartidas entre nodos de k8s
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: postgres
                    app.kubernetes.io/name: postgres
                namespaces:
                  - postgres
                topologyKey: kubernetes.io/hostname
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 5